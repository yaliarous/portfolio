{"version":3,"file":"static/js/604.c0cbe94c.chunk.js","mappings":"oNASA,MAAMA,EAAS,CACb,SAAK,SAAK,SAAK,SAAK,SACpB,SAAK,SAAK,SAAK,SAAK,SACpB,SAAK,SAAK,SAAK,SAAK,SACpB,SAAK,SAAK,SAAK,SAAK,SACpB,SAAK,SAAK,SAAK,SAAK,SACpB,SAAK,SAAK,SAAK,SAAK,SACpB,SAAK,SAAK,SAAK,SAAK,SACpB,SAAK,SAAK,SAAK,SACf,SAAK,SAAK,SAAK,SAAK,SACpB,SAAK,SAAK,SAAK,SAAK,SACpB,SAAK,SAAK,SAAK,SAAK,SACpB,SAAK,SAAK,SAAK,SAAK,SACpB,SAAK,SAAK,SAAK,SAAK,SACpB,SAAK,SAAK,SAAK,SAAK,SACpB,SAAK,SAAK,SAAK,SAAK,UAGhBC,EACG,QADHA,EAEG,QAkBT,MAAMC,EAAc,EAClBC,KAAAA,EACAC,MAAAA,GAAQ,EACRC,MAAOC,EAAa,EACpBC,UAAAA,KACGC,MAEH,MAAMC,GAASC,EAAAA,EAAAA,QAAO,CAAC,CAAEC,KAAMV,EAAgBW,MAAO,MAChDC,GAAYH,EAAAA,EAAAA,UACZI,GAAeC,EAAAA,EAAAA,MA+CrB,OA7CAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAoBJ,EAAUK,QAC9BC,EAAUhB,EAAKiB,MAAM,IAC3B,IAAIC,EAEJ,MAAMC,EAAe,KACnB,MAAMC,EAAed,EAAOS,QAAQM,KAAIC,GAC9B,8BAA6BA,EAAKd,SAASc,EAAKb,iBAG1DK,EAAkBS,UAAYH,EAAaI,KAAK,KAG5CC,GAAchB,EAAAA,EAAAA,IAAM,GAAGiB,IAC3BpB,EAAOS,QAxCb,SAAiBC,EAASV,EAAQoB,GAChC,OAAOV,EAAQK,KAAI,CAACZ,EAAOkB,KACzB,GAAIA,EAAQD,EACV,MAAO,CAAElB,KAAMV,EAAgBW,MAAAA,GAGjC,GAAIiB,EAAW,EAAI,GAAK,CACtB,MAAME,EAAOC,KAAKC,MAAMD,KAAKE,SAAWlC,EAAOmC,QAC/C,MAAO,CAAExB,KAAMV,EAAgBW,MAAOZ,EAAO+B,IAG/C,MAAO,CAAEpB,KAAMV,EAAgBW,MAAOH,EAAOqB,GAAOlB,UA6BjCwB,CAAQjB,EAASV,EAAOS,QAASW,GAClDP,OAuBF,OApBIlB,GAAUiB,GAAcP,GAAiBuB,EAAAA,IAC3ChB,GAAYiB,EAAAA,EAAAA,KACVjC,EAAAA,EAAAA,IAAMC,IACNiC,EAAAA,EAAAA,IAAO,CACLC,KAAM,EACNC,GAAItB,EAAQgB,OACZO,UAAW,EACXC,QAAS,KAEXvC,MAAMwB,IAGNd,IACFL,EAAOS,QAAUC,EAAQK,KAAI,CAACZ,EAAOkB,KAAR,CAC3BnB,KAAMV,EACNW,MAAOO,EAAQW,OAEjBR,KAGK,KACDD,GACFA,EAAUuB,UAGb,CAAC9B,EAAcV,EAAOE,EAAYH,KAGnC,kBAAMI,UAAWsC,GAAAA,CAAW,eAAgBtC,MAAgBC,EAA5D,WACE,SAACsC,EAAA,EAAD,CAAgBvC,UAAU,sBAA1B,SAAiDJ,KACjD,iBAAM,iBAAYI,UAAU,wBAAwBwC,IAAKlC,QAK/D,GAAemC,EAAAA,EAAAA,MAAK9C,I,2EC3GpB,MAAM+C,EAAU,EACdC,UAAAA,EACAC,WAAAA,EACAC,WAAAA,EACAC,YAAAA,EACAC,cAAAA,EACAC,UAAAA,EACAhD,UAAAA,EACAiD,MAAAA,MAEA,iBACEjD,UAAWsC,GAAAA,CAAW,UAAWtC,GACjCiD,MAAO,CACL,cAAeN,EACf,eAAgBC,EAChB,eAAgBC,EAChB,gBAAiBC,EACjB,mBAAmBI,EAAAA,EAAAA,IAAQH,MACxBE,GARP,WAWE,gBACEjD,UAAWsC,GAAAA,CAAW,gBAAiB,CAAE,2BAA4BU,OAEvE,gBACEhD,UAAWsC,GAAAA,CAAW,iBAAkB,CAAE,4BAA6BU,IACvEC,MAAO,CAAE,mBAAmBC,EAAAA,EAAAA,IAAQH,EAAgB,WAK1DL,EAAQS,aAAe,CACrBR,UAAW,OACXC,WAAY,MACZC,WAAY,OACZC,YAAa,OACbE,WAAW,EACXD,cAAe,GAGjB,W,+FCtCA,MA8CA,EA9CgB,EACdK,SAAAA,EACAC,MAAAA,EAAQ,EACRC,GAAAA,EACAC,MAAAA,EAAQ,OACRC,OAAAA,EAAS,SACTxD,UAAAA,KACGC,MAEH,MAAMwD,EAAehC,KAAKiC,IAAIjC,KAAKkC,IAAIN,EAAO,GAAI,GAC5CO,EAAYN,GAAO,IAAG7B,KAAKkC,IAAIF,EAAc,KAEnD,OACE,UAAC,EAAAI,SAAD,WAEc,SAAXL,IACC,UAACM,EAAA,EAAD,YACE,iBAAMC,IAAI,UAAUC,KAAMC,EAAYX,GAAG,OAAOY,YAAY,MAC5D,2BACI,qIAIaD,gGAOrB,SAACL,EAAD,CACE5D,UAAWsC,GAAAA,CACTtC,EACA,UACC,kBAAiBuD,IACjB,kBAAiBE,IACjB,mBAAkBD,QAEjBvD,EARN,SAUGmD,S,2EC1CT,MAQA,GARgBe,EAAAA,EAAAA,aACd,EAAGb,GAAIM,EAAY,MAAOR,SAAAA,EAAUpD,UAAAA,KAAcC,GAAQuC,KACxD,SAACoB,EAAD,CAAW5D,UAAWsC,GAAAA,CAAW,UAAWtC,GAAYwC,IAAKA,KAASvC,EAAtE,SACGmD,O,iECJP,MA6BA,EA7Ba,EACXA,SAAAA,EACAgB,KAAAA,EAAO,IACPd,GAAIM,EAAY,IAChBL,MAAAA,EAAQ,OACRC,OAAAA,EAAS,OACTa,UAAAA,EACArE,UAAAA,KACGC,MAGD,SAAC2D,EAAD,CACE5D,UAAWsC,GAAAA,CACTtC,EACA,OACC,eAAcuD,IACd,cAAaa,IACb,gBAAeZ,IAChB,CACE,kBAAmBa,OAGnBpE,EAXN,SAaGmD,K,6JCvBP,MAuDA,EAvDiB,EACfpD,UAAAA,EACAsE,OAAAA,EAAS,OACTjE,MAAAA,EACAkE,SAAAA,EACAC,QAAAA,EAAU,EACVC,QAAAA,KACGxE,MAEH,MAAOyE,EAAMC,IAAWC,EAAAA,EAAAA,UAASJ,IAC1BK,EAAoBC,IAAyBF,EAAAA,EAAAA,YAC9CG,GAAc5E,EAAAA,EAAAA,WAEpBM,EAAAA,EAAAA,YAAU,KACR,MAAMwC,EAAQ+B,iBAAiBD,EAAYpE,SACrCiC,EAAaqC,SAAShC,EAAML,WAAY,IACxCsC,EACJD,SAAShC,EAAMkC,WAAY,IAAMF,SAAShC,EAAMmC,cAAe,IACjEN,EAAsB,CAAElC,WAAAA,EAAYsC,cAAAA,MACnC,IAuBH,OACE,qBACElF,UAAWsC,GAAAA,CAAW,WAAYtC,GAClCwC,IAAKuC,EACLR,SAzBiBc,IACnBd,EAASc,GAET,MAAM,WAAEzC,EAAF,cAAcsC,GAAkBL,EAChCS,EAAeD,EAAME,OAAOb,KAClCW,EAAME,OAAOb,KAAOF,EAEpB,MAAMgB,MAAkBH,EAAME,OAAOE,aAAeP,GAAiBtC,GAEjE4C,IAAgBF,IAClBD,EAAME,OAAOb,KAAOc,GAGlBf,GAAWe,GAAef,IAC5BY,EAAME,OAAOb,KAAOD,EACpBY,EAAME,OAAOG,UAAYL,EAAME,OAAOE,cAGxCd,EAAQF,GAAWe,EAAcf,EAAUA,EAAUe,IAQnDvC,MAAO,CAAE,WAAYqB,GACrBI,KAAMA,EACNrE,MAAOA,KACHJ,K,4CC3CV,MAuFA,EAvFc,EACZ0F,GAAAA,EACAC,MAAAA,EACAC,SAAAA,EACAxF,MAAAA,EACAyF,UAAAA,EACA9F,UAAAA,EACAiD,MAAAA,EACA8C,MAAAA,EACAC,OAAAA,KACG/F,MAEH,MAAOgG,EAASC,IAActB,EAAAA,EAAAA,WAAS,GACjCuB,GAAcC,EAAAA,EAAAA,MACdC,GAAWlG,EAAAA,EAAAA,UACXmG,EAAUX,GAAO,SAAQQ,IACzBI,EAAW,GAAED,UACbE,EAAW,GAAEF,UACbG,EAAeX,EAAYY,EAAW,QAU5C,OACE,iBACE1G,UAAWsC,GAAAA,CAAW,QAAStC,EAAW,CAAE,iBAAkB+F,IAC9D9C,MAAOA,EAFT,WAIE,iBAAKjD,UAAU,iBAAf,WACE,kBACEA,UAAWsC,GAAAA,CAAW,eAAgB,CACpC,wBAAyB2D,EACzB,4BAA6B5F,IAE/BsF,GAAIY,EACJI,QAASL,EANX,SAQGV,KAEH,SAACa,EAAD,CACEzG,UAAU,iBACV2F,GAAIW,EACJ,kBAAiBC,EACjB,mBAAoBR,EAAQS,OAAUI,EACtCC,QAAS,IAAMX,GAAW,GAC1BF,OA9BWX,IACjBa,GAAW,GAEPF,GACFA,EAAOX,IA2BHhF,MAAOA,KACHJ,KAEN,gBACED,UAAWsC,GAAAA,CAAW,mBAAoB,CACxC,4BAA6B2D,UAInC,SAACa,EAAA,EAAD,CAAiBC,UAAW,KAA5B,WACKhB,IACD,SAACiB,EAAA,GAAD,CAAYC,SAASC,EAAAA,EAAAA,IAAQC,EAAAA,EAAAA,KAAAA,WAA7B,SACGC,IAAM,aACL,gBACEpH,UAAWsC,GAAAA,CAAW,eAAiB,iBAAgB8E,KACvDzB,GAAIa,EACJa,KAAK,QACLpE,MAAO,CACL,YAAYqE,EAAAA,EAAAA,IAAUF,IAClBG,EAAAA,EAAAA,IAAO,UAAClB,EAAS1F,eAAV,aAAC,EAAkB6G,wBAAwBC,QAClD,OAPR,UAUE,iBAAKzH,UAAU,uBAAuBwC,IAAK6D,EAA3C,WACE,SAACqB,EAAA,EAAD,CAAMC,KAAK,UACV5B,gB,4CCnEnB,MAAM6B,EAAYT,EAAAA,EAAAA,KAAAA,UAqBlB,SAASU,EAASC,EAASC,GAAc7E,EAAAA,EAAAA,IAAQ,GAAI8E,EAAa,GAChE,MAAMC,GAAWf,EAAAA,EAAAA,IAAQY,GAAWE,EACpC,MAAO,CAAE,WAAW9E,EAAAA,EAAAA,MAASgE,EAAAA,EAAAA,IAAQa,GAAeE,GAAUC,QAAQ,KAGxE,MA0MA,EA1MgB,KACd,MAAM,OAAEd,IAAWe,EAAAA,EAAAA,MACb9B,GAAWlG,EAAAA,EAAAA,UACXiI,GAAQC,EAAAA,EAAAA,IAAa,IACrBC,GAAUD,EAAAA,EAAAA,IAAa,KACtBE,EAASC,IAAc5D,EAAAA,EAAAA,WAAS,IAChC6D,EAAUC,IAAe9D,EAAAA,EAAAA,WAAS,IAClC+D,EAAaC,IAAkBhE,EAAAA,EAAAA,UAAS,KAC/CiE,EAAAA,EAAAA,MAEA,MAAMC,GAAWC,EAAAA,EAAAA,cACfC,MAAAA,IAIE,GAHA3D,EAAM4D,iBACNL,EAAe,KAEXL,EAEJ,IACEC,GAAW,GAEX,MAAMU,QAAiBC,MAAM,mCAAoC,CAC/DC,OAAQ,OACRC,KAAM,OACNC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBrB,MAAOA,EAAM/H,MACbiI,QAASA,EAAQjI,UAIfqJ,QAAwBR,EAASS,OAEjChB,EA1Dd,UAAwB,OACtBvB,EADsB,aAEtBwC,EAFsB,SAGtBC,EAAW,0CAEX,OAAe,MAAXzC,IAOAwC,GALa,CACf,IAAK,uDACL,IAAK,6FAOSxC,IAAWyC,GA0CDC,CAAe,CACjC1C,OAAM,OAAE8B,QAAF,IAAEA,OAAF,EAAEA,EAAU9B,OAClBwC,aAAY,OAAEF,QAAF,IAAEA,OAAF,EAAEA,EAAiB3D,MAC/B8D,SAAU,6CAGZ,GAAIlB,EAAa,MAAM,IAAIoB,MAAMpB,GAEjCD,GAAY,GACZF,GAAW,GACX,MAAOzC,GACPyC,GAAW,GACXI,EAAe7C,EAAMuC,YAGzB,CAACF,EAAM/H,MAAOiI,EAAQjI,MAAOkI,IAG/B,OACE,UAACyB,EAAA,EAAD,CAAShK,UAAWsC,GAAAA,CAAW,UAAY,YAAW8E,KAAtD,WACE,UAACtD,EAAA,EAAD,YACE,4DACA,iBACEmG,KAAK,cACLrJ,QAAQ,0GAGZ,UAACkG,EAAA,EAAD,CAAiBC,UAAW,KAA5B,WACI0B,IACA,SAACzB,EAAA,GAAD,CAAYkD,QAAM,EAACC,cAAY,EAACC,eAAa,EAACnD,QAAS,KAAMoD,QAASC,EAAAA,GAAtE,SACGlD,IACC,kBAAMpH,UAAU,gBAAgBoJ,OAAO,OAAON,SAAUA,EAAxD,WACE,SAACyB,EAAA,EAAD,CACEvK,UAAWsC,GAAAA,CAAW,iBAAmB,mBAAkB8E,IAAU,CACnE,yBAA0BtF,EAAAA,IAE5BuB,MAAO,EACPC,GAAG,KACHL,MAAO4E,EAASV,EAAAA,EAAAA,KAAAA,WAAwBS,EAAW,IANrD,UAQE,SAACjI,EAAA,EAAD,CACEC,KAAK,YACLC,MAAkB,WAAXuH,IAAwBtF,EAAAA,EAC/BhC,MAAO,SAGX,SAAC4C,EAAA,EAAD,CACE1C,UAAWsC,GAAAA,CACT,mBACC,qBAAoB8E,IACrB,CAAE,2BAA4BtF,EAAAA,IAEhCmB,MAAO4E,EAASV,EAAAA,EAAAA,KAAAA,WAAwBS,EAAW,OAErD,SAAC,EAAD,CACE4C,UAAQ,EACRxK,UAAWsC,GAAAA,CAAW,iBAAmB,mBAAkB8E,IAAU,CACnE,yBAA0BtF,EAAAA,IAE5BmB,MAAO4E,EAASV,EAAAA,EAAAA,KAAAA,WAAwBS,GACxC6C,aAAa,QACb7E,MAAM,aACNxF,KAAK,QACLsK,UAAW,OACPtC,KAEN,SAAC,EAAD,CACEoC,UAAQ,EACR1E,WAAS,EACT9F,UAAWsC,GAAAA,CAAW,iBAAmB,mBAAkB8E,IAAU,CACnE,yBAA0BtF,EAAAA,IAE5BmB,MAAO4E,EAASV,EAAAA,EAAAA,KAAAA,UAAuBS,GACvC6C,aAAa,MACb7E,MAAM,UACN8E,UAAW,QACPpC,KAEN,SAACxB,EAAA,EAAD,CAAiBC,UAAW,KAA5B,WACK4B,IACD,SAAC3B,EAAA,GAAD,CAAYC,SAASC,EAAAA,EAAAA,IAAQC,EAAAA,EAAAA,KAAAA,WAA7B,SACGwD,IAAW,aACV,gBACE3K,UAAWsC,GAAAA,CACT,sBACC,wBAAuBqI,KAE1B1H,MAAO,CACL,YAAYqE,EAAAA,EAAAA,IAAUqD,IAClBpD,EAAAA,EAAAA,IAAO,UAAClB,EAAS1F,eAAV,aAAC,EAAkB6G,wBAAwBC,QAClD,OARR,UAWE,gBAAKzH,UAAU,8BAA8BwC,IAAK6D,EAAlD,UACE,iBAAKrG,UAAU,8BAAf,WACE,SAAC0H,EAAA,EAAD,CAAM1H,UAAU,2BAA2B2H,KAAK,UAC/CgB,eAQf,SAACiC,EAAA,EAAD,CACE5K,UAAWsC,GAAAA,CAAW,kBAAoB,oBAAmB8E,IAAU,CACrE,0BAA2BtF,EAAAA,EAC3B,2BAA4ByG,IAE9BtF,MAAO4E,EAASV,EAAAA,EAAAA,KAAAA,UAAuBS,GACvCiD,SAAUtC,EACVuC,QAASvC,EACTwC,YAAY,aACZpD,KAAK,OACLvH,KAAK,SAVP,+BAkBPqI,IACC,SAACzB,EAAA,GAAD,CAAYkD,QAAM,EAACC,cAAY,EAACC,eAAa,EAACC,QAASC,EAAAA,GAAQrD,QAAS,EAAxE,SACGG,IACC,iBAAKpH,UAAU,oBAAoB,YAAU,SAA7C,WACE,SAACuK,EAAA,EAAD,CACElH,MAAO,EACPC,GAAG,KACHtD,UAAWsC,GAAAA,CACT,0BACC,4BAA2B8E,KALhC,2BAUA,SAAC4D,EAAA,EAAD,CACE5G,KAAK,IACLpE,UAAWsC,GAAAA,CACT,yBACC,2BAA0B8E,KAE7BnE,MAAO4E,EAASV,EAAAA,EAAAA,KAAAA,YANlB,wEAUA,SAACyD,EAAA,EAAD,CACEvG,WAAS,EACT4G,gBAAc,EACdjL,UAAWsC,GAAAA,CACT,2BACC,6BAA4B8E,KAE/BnE,MAAO4E,EAASV,EAAAA,EAAAA,KAAAA,WAChBnD,KAAK,IACL2D,KAAK,eATP,2C","sources":["components/DecoderText/index.js","components/Divider/index.js","components/Heading/index.js","components/Section/index.js","components/Text/index.js","components/Input/TextArea.js","components/Input/index.js","pages/Contact/index.js"],"sourcesContent":["import { useRef, useEffect, memo } from 'react';\nimport classNames from 'classnames';\nimport { usePrefersReducedMotion } from 'hooks';\nimport { spring, chain, delay, value } from 'popmotion';\nimport VisuallyHidden from 'components/VisuallyHidden';\nimport prerender from 'utils/prerender';\nimport './index.css';\n\n// prettier-ignore\nconst glyphs = [\n  'ア', 'イ', 'ウ', 'エ', 'オ',\n  'カ', 'キ', 'ク', 'ケ', 'コ',\n  'サ', 'シ', 'ス', 'セ', 'ソ',\n  'タ', 'チ', 'ツ', 'テ', 'ト',\n  'ナ', 'ニ', 'ヌ', 'ネ', 'ノ',\n  'ハ', 'ヒ', 'フ', 'ヘ', 'ホ',\n  'マ', 'ミ', 'ム', 'メ', 'モ',\n  'ヤ', 'ユ', 'ヨ', 'ー',\n  'ラ', 'リ', 'ル', 'レ', 'ロ',\n  'ワ', 'ヰ', 'ヱ', 'ヲ', 'ン',\n  'ガ', 'ギ', 'グ', 'ゲ', 'ゴ',\n  'ザ', 'ジ', 'ズ', 'ゼ', 'ゾ',\n  'ダ', 'ヂ', 'ヅ', 'デ', 'ド',\n  'バ', 'ビ', 'ブ', 'ベ', 'ボ',\n  'パ', 'ピ', 'プ', 'ペ', 'ポ',\n];\n\nconst CharType = {\n  Glyph: 'glyph',\n  Value: 'value',\n};\n\nfunction shuffle(content, output, position) {\n  return content.map((value, index) => {\n    if (index < position) {\n      return { type: CharType.Value, value };\n    }\n\n    if (position % 1 < 0.5) {\n      const rand = Math.floor(Math.random() * glyphs.length);\n      return { type: CharType.Glyph, value: glyphs[rand] };\n    }\n\n    return { type: CharType.Glyph, value: output[index].value };\n  });\n}\n\nconst DecoderText = ({\n  text,\n  start = true,\n  delay: startDelay = 0,\n  className,\n  ...rest\n}) => {\n  const output = useRef([{ type: CharType.Glyph, value: '' }]);\n  const container = useRef();\n  const reduceMotion = usePrefersReducedMotion();\n\n  useEffect(() => {\n    const containerInstance = container.current;\n    const content = text.split('');\n    let animation;\n\n    const renderOutput = () => {\n      const characterMap = output.current.map(item => {\n        return `<span class=\"decoder-text__${item.type}\">${item.value}</span>`;\n      });\n\n      containerInstance.innerHTML = characterMap.join('');\n    };\n\n    const springValue = value(0, position => {\n      output.current = shuffle(content, output.current, position);\n      renderOutput();\n    });\n\n    if (start && !animation && !reduceMotion && !prerender) {\n      animation = chain(\n        delay(startDelay),\n        spring({\n          from: 0,\n          to: content.length,\n          stiffness: 8,\n          damping: 5,\n        })\n      ).start(springValue);\n    }\n\n    if (reduceMotion) {\n      output.current = content.map((value, index) => ({\n        type: CharType.Value,\n        value: content[index],\n      }));\n      renderOutput();\n    }\n\n    return () => {\n      if (animation) {\n        animation.stop();\n      }\n    };\n  }, [reduceMotion, start, startDelay, text]);\n\n  return (\n    <span className={classNames('decoder-text', className)} {...rest}>\n      <VisuallyHidden className=\"decoder-text__label\">{text}</VisuallyHidden>\n      <span aria-hidden className=\"decoder-text__content\" ref={container} />\n    </span>\n  );\n};\n\nexport default memo(DecoderText);\n","import classNames from 'classnames';\nimport { numToMs } from 'utils/style';\nimport './index.css';\n\nconst Divider = ({\n  lineWidth,\n  lineHeight,\n  notchWidth,\n  notchHeight,\n  collapseDelay,\n  collapsed,\n  className,\n  style,\n}) => (\n  <div\n    className={classNames('divider', className)}\n    style={{\n      '--lineWidth': lineWidth,\n      '--lineHeight': lineHeight,\n      '--notchWidth': notchWidth,\n      '--notchHeight': notchHeight,\n      '--collapseDelay': numToMs(collapseDelay),\n      ...style,\n    }}\n  >\n    <div\n      className={classNames('divider__line', { 'divider__line--collapsed': collapsed })}\n    />\n    <div\n      className={classNames('divider__notch', { 'divider__notch--collapsed': collapsed })}\n      style={{ '--collapseDelay': numToMs(collapseDelay + 160) }}\n    />\n  </div>\n);\n\nDivider.defaultProps = {\n  lineWidth: '100%',\n  lineHeight: '2px',\n  notchWidth: '90px',\n  notchHeight: '10px',\n  collapsed: false,\n  collapseDelay: 0,\n};\n\nexport default Divider;\n","import { Fragment } from 'react';\nimport classNames from 'classnames';\nimport { Helmet } from 'react-helmet';\nimport GothamBold from 'assets/fonts/gotham-bold.woff2';\nimport './index.css';\n\nconst Heading = ({\n  children,\n  level = 1,\n  as,\n  align = 'auto',\n  weight = 'medium',\n  className,\n  ...rest\n}) => {\n  const clampedLevel = Math.min(Math.max(level, 0), 4);\n  const Component = as || `h${Math.max(clampedLevel, 1)}`;\n\n  return (\n    <Fragment>\n      {/* Conditionally load the bold font weight because we use it less frequently */}\n      {weight === 'bold' && (\n        <Helmet>\n          <link rel=\"preload\" href={GothamBold} as=\"font\" crossorigin=\"\" />\n          <style>\n            {`\n              @font-face {\n                font-family: 'Gotham';\n                font-weight: 700;\n                src: url(${GothamBold}) format('woff2');\n                font-display: swap;\n              }\n            `}\n          </style>\n        </Helmet>\n      )}\n      <Component\n        className={classNames(\n          className,\n          'heading',\n          `heading--align-${align}`,\n          `heading--level-${clampedLevel}`,\n          `heading--weight-${weight}`\n        )}\n        {...rest}\n      >\n        {children}\n      </Component>\n    </Fragment>\n  );\n};\n\nexport default Heading;\n","import { forwardRef } from 'react';\nimport classNames from 'classnames';\nimport './index.css';\n\nconst Section = forwardRef(\n  ({ as: Component = 'div', children, className, ...rest }, ref) => (\n    <Component className={classNames('section', className)} ref={ref} {...rest}>\n      {children}\n    </Component>\n  )\n);\n\nexport default Section;\n","import classNames from 'classnames';\nimport './index.css';\n\nconst Text = ({\n  children,\n  size = 'm',\n  as: Component = 'p',\n  align = 'auto',\n  weight = 'auto',\n  secondary,\n  className,\n  ...rest\n}) => {\n  return (\n    <Component\n      className={classNames(\n        className,\n        'text',\n        `text--align-${align}`,\n        `text--size-${size}`,\n        `text--weight-${weight}`,\n        {\n          'text--secondary': secondary,\n        }\n      )}\n      {...rest}\n    >\n      {children}\n    </Component>\n  );\n};\n\nexport default Text;\n","import { useRef, useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport './TextArea.css';\n\nconst TextArea = ({\n  className,\n  resize = 'none',\n  value,\n  onChange,\n  minRows = 1,\n  maxRows,\n  ...rest\n}) => {\n  const [rows, setRows] = useState(minRows);\n  const [textareaDimensions, setTextareaDimensions] = useState();\n  const textareaRef = useRef();\n\n  useEffect(() => {\n    const style = getComputedStyle(textareaRef.current);\n    const lineHeight = parseInt(style.lineHeight, 10);\n    const paddingHeight =\n      parseInt(style.paddingTop, 10) + parseInt(style.paddingBottom, 10);\n    setTextareaDimensions({ lineHeight, paddingHeight });\n  }, []);\n\n  const handleChange = event => {\n    onChange(event);\n\n    const { lineHeight, paddingHeight } = textareaDimensions;\n    const previousRows = event.target.rows;\n    event.target.rows = minRows;\n\n    const currentRows = ~~((event.target.scrollHeight - paddingHeight) / lineHeight);\n\n    if (currentRows === previousRows) {\n      event.target.rows = currentRows;\n    }\n\n    if (maxRows && currentRows >= maxRows) {\n      event.target.rows = maxRows;\n      event.target.scrollTop = event.target.scrollHeight;\n    }\n\n    setRows(maxRows && currentRows > maxRows ? maxRows : currentRows);\n  };\n\n  return (\n    <textarea\n      className={classNames('textarea', className)}\n      ref={textareaRef}\n      onChange={handleChange}\n      style={{ '--resize': resize }}\n      rows={rows}\n      value={value}\n      {...rest}\n    />\n  );\n};\n\nexport default TextArea;\n","import { useState, useRef } from 'react';\nimport classNames from 'classnames';\nimport { TransitionGroup, Transition } from 'react-transition-group';\nimport TextArea from './TextArea';\nimport { useId } from 'hooks';\nimport { isVisible } from 'utils/transition';\nimport { tokens } from 'components/ThemeProvider/theme';\nimport { msToNum, numToPx } from 'utils/style';\nimport Icon from 'components/Icon';\nimport './index.css';\n\nconst Input = ({\n  id,\n  label,\n  hasValue,\n  value,\n  multiline,\n  className,\n  style,\n  error,\n  onBlur,\n  ...rest\n}) => {\n  const [focused, setFocused] = useState(false);\n  const generatedId = useId();\n  const errorRef = useRef();\n  const inputId = id || `input-${generatedId}`;\n  const labelId = `${inputId}-label`;\n  const errorId = `${inputId}-error`;\n  const InputElement = multiline ? TextArea : 'input';\n\n  const handleBlur = event => {\n    setFocused(false);\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  return (\n    <div\n      className={classNames('input', className, { 'input--error': !!error })}\n      style={style}\n    >\n      <div className=\"input__content\">\n        <label\n          className={classNames('input__label', {\n            'input__label--focused': focused,\n            'input__label--has-value': !!value,\n          })}\n          id={labelId}\n          htmlFor={inputId}\n        >\n          {label}\n        </label>\n        <InputElement\n          className=\"input__element\"\n          id={inputId}\n          aria-labelledby={labelId}\n          aria-describedby={!!error ? errorId : undefined}\n          onFocus={() => setFocused(true)}\n          onBlur={handleBlur}\n          value={value}\n          {...rest}\n        />\n        <div\n          className={classNames('input__underline', {\n            'input__underline--focused': focused,\n          })}\n        />\n      </div>\n      <TransitionGroup component={null}>\n        {!!error && (\n          <Transition timeout={msToNum(tokens.base.durationM)}>\n            {status => (\n              <div\n                className={classNames('input__error', `input__error--${status}`)}\n                id={errorId}\n                role=\"alert\"\n                style={{\n                  '--height': isVisible(status)\n                    ? numToPx(errorRef.current?.getBoundingClientRect().height)\n                    : '0px',\n                }}\n              >\n                <div className=\"input__error-message\" ref={errorRef}>\n                  <Icon icon=\"error\" />\n                  {error}\n                </div>\n              </div>\n            )}\n          </Transition>\n        )}\n      </TransitionGroup>\n    </div>\n  );\n};\n\nexport default Input;\n","import './index.css';\n\nimport classNames from 'classnames';\nimport { Button } from 'components/Button';\nimport DecoderText from 'components/DecoderText';\nimport Divider from 'components/Divider';\nimport Heading from 'components/Heading';\nimport Icon from 'components/Icon';\nimport Input from 'components/Input';\nimport Section from 'components/Section';\nimport Text from 'components/Text';\nimport { tokens } from 'components/ThemeProvider/theme';\nimport { useFormInput, useRouteTransition, useScrollRestore } from 'hooks';\nimport { useCallback, useRef, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Transition, TransitionGroup } from 'react-transition-group';\nimport prerender from 'utils/prerender';\nimport { msToNum, numToMs, numToPx } from 'utils/style';\nimport { isVisible, reflow } from 'utils/transition';\n\nconst initDelay = tokens.base.durationS;\n\nfunction getStatusError({\n  status,\n  errorMessage,\n  fallback = 'There was a problem with your request',\n}) {\n  if (status === 200) return false;\n\n  const statuses = {\n    500: 'There was a problem with the server, try again later',\n    404: 'There was a problem connecting to the server. Make sure you are connected to the internet',\n  };\n\n  if (errorMessage) {\n    return errorMessage;\n  }\n\n  return statuses[status] || fallback;\n}\n\nfunction getDelay(delayMs, initDelayMs = numToMs(0), multiplier = 1) {\n  const numDelay = msToNum(delayMs) * multiplier;\n  return { '--delay': numToMs((msToNum(initDelayMs) + numDelay).toFixed(0)) };\n}\n\nconst Contact = () => {\n  const { status } = useRouteTransition();\n  const errorRef = useRef();\n  const email = useFormInput('');\n  const message = useFormInput('');\n  const [sending, setSending] = useState(false);\n  const [complete, setComplete] = useState(false);\n  const [statusError, setStatusError] = useState('');\n  useScrollRestore();\n\n  const onSubmit = useCallback(\n    async event => {\n      event.preventDefault();\n      setStatusError('');\n\n      if (sending) return;\n\n      try {\n        setSending(true);\n\n        const response = await fetch('https://api.Mohamedw.com/message', {\n          method: 'POST',\n          mode: 'cors',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            email: email.value,\n            message: message.value,\n          }),\n        });\n\n        const responseMessage = await response.json();\n\n        const statusError = getStatusError({\n          status: response?.status,\n          errorMessage: responseMessage?.error,\n          fallback: 'There was a problem sending your message',\n        });\n\n        if (statusError) throw new Error(statusError);\n\n        setComplete(true);\n        setSending(false);\n      } catch (error) {\n        setSending(false);\n        setStatusError(error.message);\n      }\n    },\n    [email.value, message.value, sending]\n  );\n\n  return (\n    <Section className={classNames('contact', `contact--${status}`)}>\n      <Helmet>\n        <title>Contact | Mohamed ALI AROUS</title>\n        <meta\n          name=\"description\"\n          content=\"Send me a message if you’re interested in discussing a project or if you just want to say hi\"\n        />\n      </Helmet>\n      <TransitionGroup component={null}>\n        {!complete && (\n          <Transition appear mountOnEnter unmountOnExit timeout={1600} onEnter={reflow}>\n            {status => (\n              <form className=\"contact__form\" method=\"post\" onSubmit={onSubmit}>\n                <Heading\n                  className={classNames('contact__title', `contact__title--${status}`, {\n                    'contact__title--hidden': prerender,\n                  })}\n                  level={3}\n                  as=\"h1\"\n                  style={getDelay(tokens.base.durationXS, initDelay, 0.3)}\n                >\n                  <DecoderText\n                    text=\"Say hello\"\n                    start={status !== 'exited' && !prerender}\n                    delay={300}\n                  />\n                </Heading>\n                <Divider\n                  className={classNames(\n                    'contact__divider',\n                    `contact__divider--${status}`,\n                    { 'contact__divider--hidden': prerender }\n                  )}\n                  style={getDelay(tokens.base.durationXS, initDelay, 0.4)}\n                />\n                <Input\n                  required\n                  className={classNames('contact__input', `contact__input--${status}`, {\n                    'contact__input--hidden': prerender,\n                  })}\n                  style={getDelay(tokens.base.durationXS, initDelay)}\n                  autoComplete=\"email\"\n                  label=\"Your Email\"\n                  type=\"email\"\n                  maxLength={512}\n                  {...email}\n                />\n                <Input\n                  required\n                  multiline\n                  className={classNames('contact__input', `contact__input--${status}`, {\n                    'contact__input--hidden': prerender,\n                  })}\n                  style={getDelay(tokens.base.durationS, initDelay)}\n                  autoComplete=\"off\"\n                  label=\"Message\"\n                  maxLength={4096}\n                  {...message}\n                />\n                <TransitionGroup component={null}>\n                  {!!statusError && (\n                    <Transition timeout={msToNum(tokens.base.durationM)}>\n                      {errorStatus => (\n                        <div\n                          className={classNames(\n                            'contact__form-error',\n                            `contact__form-error--${errorStatus}`\n                          )}\n                          style={{\n                            '--height': isVisible(errorStatus)\n                              ? numToPx(errorRef.current?.getBoundingClientRect().height)\n                              : '0px',\n                          }}\n                        >\n                          <div className=\"contact__form-error-content\" ref={errorRef}>\n                            <div className=\"contact__form-error-message\">\n                              <Icon className=\"contact__form-error-icon\" icon=\"error\" />\n                              {statusError}\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                    </Transition>\n                  )}\n                </TransitionGroup>\n                <Button\n                  className={classNames('contact__button', `contact__button--${status}`, {\n                    'contact__button--hidden': prerender,\n                    'contact__button--sending': sending,\n                  })}\n                  style={getDelay(tokens.base.durationM, initDelay)}\n                  disabled={sending}\n                  loading={sending}\n                  loadingText=\"Sending...\"\n                  icon=\"send\"\n                  type=\"submit\"\n                >\n                  Send Message\n                </Button>\n              </form>\n            )}\n          </Transition>\n        )}\n        {complete && (\n          <Transition appear mountOnEnter unmountOnExit onEnter={reflow} timeout={0}>\n            {status => (\n              <div className=\"contact__complete\" aria-live=\"polite\">\n                <Heading\n                  level={3}\n                  as=\"h3\"\n                  className={classNames(\n                    'contact__complete-title',\n                    `contact__complete-title--${status}`\n                  )}\n                >\n                  Message Sent\n                </Heading>\n                <Text\n                  size=\"l\"\n                  className={classNames(\n                    'contact__complete-text',\n                    `contact__complete-text--${status}`\n                  )}\n                  style={getDelay(tokens.base.durationXS)}\n                >\n                  I’ll get back to you within a couple days, sit tight\n                </Text>\n                <Button\n                  secondary\n                  iconHoverShift\n                  className={classNames(\n                    'contact__complete-button',\n                    `contact__complete-button--${status}`\n                  )}\n                  style={getDelay(tokens.base.durationM)}\n                  href=\"/\"\n                  icon=\"chevronRight\"\n                >\n                  Back to homepage\n                </Button>\n              </div>\n            )}\n          </Transition>\n        )}\n      </TransitionGroup>\n    </Section>\n  );\n};\n\nexport default Contact;\n"],"names":["glyphs","CharType","DecoderText","text","start","delay","startDelay","className","rest","output","useRef","type","value","container","reduceMotion","usePrefersReducedMotion","useEffect","containerInstance","current","content","split","animation","renderOutput","characterMap","map","item","innerHTML","join","springValue","position","index","rand","Math","floor","random","length","shuffle","prerender","chain","spring","from","to","stiffness","damping","stop","classNames","VisuallyHidden","ref","memo","Divider","lineWidth","lineHeight","notchWidth","notchHeight","collapseDelay","collapsed","style","numToMs","defaultProps","children","level","as","align","weight","clampedLevel","min","max","Component","Fragment","Helmet","rel","href","GothamBold","crossorigin","forwardRef","size","secondary","resize","onChange","minRows","maxRows","rows","setRows","useState","textareaDimensions","setTextareaDimensions","textareaRef","getComputedStyle","parseInt","paddingHeight","paddingTop","paddingBottom","event","previousRows","target","currentRows","scrollHeight","scrollTop","id","label","hasValue","multiline","error","onBlur","focused","setFocused","generatedId","useId","errorRef","inputId","labelId","errorId","InputElement","TextArea","htmlFor","undefined","onFocus","TransitionGroup","component","Transition","timeout","msToNum","tokens","status","role","isVisible","numToPx","getBoundingClientRect","height","Icon","icon","initDelay","getDelay","delayMs","initDelayMs","multiplier","numDelay","toFixed","useRouteTransition","email","useFormInput","message","sending","setSending","complete","setComplete","statusError","setStatusError","useScrollRestore","onSubmit","useCallback","async","preventDefault","response","fetch","method","mode","headers","body","JSON","stringify","responseMessage","json","errorMessage","fallback","getStatusError","Error","Section","name","appear","mountOnEnter","unmountOnExit","onEnter","reflow","Heading","required","autoComplete","maxLength","errorStatus","Button","disabled","loading","loadingText","Text","iconHoverShift"],"sourceRoot":""}